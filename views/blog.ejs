<%- include("partials/head.ejs", {title:`Blog ${blog.title}`,css_links:[
"/css/blog.css","https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"
]}) %>
<%-include("partials/navbar.ejs",{user})%>
<body>
    <div class="blog">
        <div class="title">
            <h2><%=blog.title%></h2>
            <div class="blog-info">
                <span class="time"><%=blog.created_at%></span>
                <span class="author">
                    By <%=blog.user_name%>
                </span>
            </div>
        </div>
        <hr />
        <div class="content-wrapper">
            <div class="content"><%=blog.content%></div>
        </div>
    </div>
</div>
</body>

<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>
<script src="
https://cdn.jsdelivr.net/npm/markdown-it@13.0.1/dist/markdown-it.min.js
"></script>
<script>
    const md = window.markdownit({
html:         false,        // Enable HTML tags in source
xhtmlOut:     false,        // Use '/' to close single tags (<br />).
                            // This is only for full CommonMark compatibility.
breaks:       false,        // Convert '\n' in paragraphs into <br>
langPrefix:   'language-',  // CSS language prefix for fenced blocks. Can be
                            // useful for external highlighters.
linkify:      false,        // Autoconvert URL-like text to links

// Enable some language-neutral replacement + quotes beautification
// For the full list of replacements, see https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js
typographer:  true,

// Double + single quotes replacement pairs, when typographer enabled,
// and smartquotes on. Could be either a String or an Array.
//
// For example, you can use '«»„“' for Russian, '„“‚‘' for German,
// and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
quotes: '“”‘’',

// Highlighter function. Should return escaped HTML,
// or '' if the source string is not changed and should be escaped externally.
// If result starts with <pre... internal wrapper is skipped.
highlight: function (str, lang) {
  if (lang && hljs.getLanguage(lang)) {
    try {
      return '<pre class="hljs"><code>' +
             hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +
             '</code></pre>';
    } catch (__) {}
  }

  return '<pre class="hljs"><code>' + md.utils.escapeHtml(str) + '</code></pre>';
}
})
// ejs escapes the html when outputing with =
// need to decode it first before converting the markdown to html
function HtmlDecode(str) {
    return String(str)
        .replace(/&amp;/g, '&')
        .replace(/&quot;/g, '\"')
        .replace(/&#39;/g, "\'")
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>');
}

    const blogs = document.querySelectorAll(".blog")
    blogs.forEach(blog=>{
      const content_el = blog.querySelector(".content")
      const time_el = blog.querySelector(".time")
      let md_content = HtmlDecode(content_el.innerHTML?.trim())
      md_content = md.render(md_content)
      content_el.innerHTML = md_content
      let time = new Date(time_el.innerHTML)
      time_el.innerHTML = time.toLocaleString()
    })
</script>



<%- include('partials/footer.ejs') %>
