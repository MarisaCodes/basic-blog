  <%- include("partials/head.ejs",{title:"BasicBlog", css_links:[
    "css/index.css","css/blog_card.css","https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"
  ]}); 
  
  %>
  <body>
    <%- include("partials/navbar.ejs", {user}) %>
    <div class="blog-wrapper">
      <%if (data===null || !data?.length) {%>
      <div class="empty">Wow such empty</div>
      <%} else { data.map(blog=>{%>
        <%-include("partials/blog_card.ejs", blog)%>
        <%})}%>
    </div>
  </div>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>
  <script src="
https://cdn.jsdelivr.net/npm/markdown-it@13.0.1/dist/markdown-it.min.js
"></script>
<script>
      const md = window.markdownit({
  html:         false,        // Enable HTML tags in source
  xhtmlOut:     false,        // Use '/' to close single tags (<br />).
                              // This is only for full CommonMark compatibility.
  breaks:       false,        // Convert '\n' in paragraphs into <br>
  langPrefix:   'language-',  // CSS language prefix for fenced blocks. Can be
                              // useful for external highlighters.
  linkify:      false,        // Autoconvert URL-like text to links

  // Enable some language-neutral replacement + quotes beautification
  // For the full list of replacements, see https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js
  typographer:  true,

  // Double + single quotes replacement pairs, when typographer enabled,
  // and smartquotes on. Could be either a String or an Array.
  //
  // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
  // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
  quotes: '“”‘’',

  // Highlighter function. Should return escaped HTML,
  // or '' if the source string is not changed and should be escaped externally.
  // If result starts with <pre... internal wrapper is skipped.
  highlight: function (str, lang) {
    if (lang && hljs.getLanguage(lang)) {
      try {
        return '<pre class="hljs"><code>' +
               hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +
               '</code></pre>';
      } catch (__) {}
    }

    return '<pre class="hljs"><code>' + md.utils.escapeHtml(str) + '</code></pre>';
  }
})



      const blogs = document.querySelectorAll(".blog")
      blogs.forEach(blog=>{
        const content_el = blog.querySelector(".content")
        const time_el = blog.querySelector(".time")
        let md_content = md.render(content_el.innerHTML?.trim())
        content_el.innerHTML = md_content
        let time = new Date(time_el.innerHTML)
        time_el.innerHTML = time.toLocaleString()
      })
</script>
    <%- include("partials/footer.ejs") %>

